//
//  ARWeightedMovingAverageQuaternionFilterTest.m
//  iBetelgeuse
//
//  Copyright 2010 Finalist IT Group. All rights reserved.
//
//  This file is part of iBetelgeuse.
//  
//  iBetelgeuse is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//  
//  iBetelgeuse is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//  
//  You should have received a copy of the GNU General Public License
//  along with iBetelgeuse.  If not, see <http://www.gnu.org/licenses/>.
//


#import "ARWeightedMovingAverageQuaternionFilterTest.h"
#import "ARWeightedMovingAverageQuaternionFilter.h"


@implementation ARWeightedMovingAverageQuaternionFilterTest

#pragma mark GHTestCase

- (void)testFilter {
	const int inputCount = 20;
	
	const ARQuaternion inputs[] = {
		{-0.569920002525389,   0.250387425887547,   0.483820127036254,  -0.615154787312504},
		{-0.693535370217374,   0.669359184394356,  -0.133959829621241,   0.230264492643177},
		{-0.018496659579175,   0.575180970164750,  -0.079345103244616,   0.813958893148696},
		{-0.392196958822912,   0.190545351456909,   0.577164946987618,  -0.690474212767574},
		{-0.233357033675117,   0.652412952501923,   0.715325094228590,  -0.090619224279023},
		{-0.396245109501917,  -0.820548002214337,   0.044623190595293,  -0.409511367508851},
		{-0.432775175236822,  -0.304152352860543,   0.559466224476662,   0.638117965283821},
		{-0.179212375438519,   0.865812550195411,   0.425224189971382,   0.193483696152890},
		{ 0.468016968894220,   0.644561840742821,   0.159668501925779,  -0.583100437127319},
		{-0.445139316709911,  -0.037022941983865,   0.704201065043644,  -0.551888712040108},
		{ 0.406140369757020,   0.441725266064261,   0.792371170389421,   0.109894120451401},
		{-0.099284260239316,  -0.144853415521920,   0.801490127591220,   0.571641232814933},
		{-0.170087601449618,  -0.305602515138660,   0.373161687364329,   0.859318139956005},
		{-0.580200530561287,  -0.512256394719981,  -0.215147825081909,   0.595543569999218},
		{-0.692699791900437,  -0.264307175948781,  -0.052890599575588,  -0.668962853617155},
		{ 0.182624786093947,  -0.737788556947346,   0.646112596705660,   0.069676001033082},
		{-0.352226422828091,  -0.042206493308509,  -0.739779820010337,   0.571735058300432},
		{ 0.110283063501477,  -0.307922377004581,  -0.634419679449021,  -0.700380700742375},
		{ 0.598629126000001,   0.640433478894976,  -0.038266433906782,   0.479607973923506},
		{ 0.467191700945069,   0.120774763635872,   0.093650439934062,   0.870847269121807},
	};
	
	const double weights[] = {
		0.944741983677650,
		0.798312868512729,
		0.799871001052351,
		0.048212019234726,
		0.759600974705730,
		0.644411816355442,
		0.412215189017229,
		0.662719512774099,
		0.930332358864542,
		0.515677420771865,
		0.914224356002328,
		0.314258970006305,
		0.276487418849412,
		0.313988376059350,
		0.567057207634918,
		0.572401254061089,
		0.446179919090943,
		0.442322190425086,
		0.164862857408960,
		0.157988437263440,
	};
	
	const ARQuaternion correctOutputs[] = {
		{-0.569920002525389,   0.250387425887547,   0.483820127036254,  -0.615154787312504},
		{-0.626535397416970,   0.442274988082785,   0.200879123378700,  -0.227955790316355},
		{-0.435278325059657,   0.484080234113920,   0.112735290013490,   0.099775881376545},
		{-0.434476731412432,   0.478618575913853,   0.121376702650404,   0.085072089214883},
		{-0.388883587511583,   0.518017163471833,   0.256022760652496,   0.045243472583213},
		{-0.390070989979336,   0.302108607731427,   0.221924326728440,  -0.028107801794157},
		{-0.394065056818043,   0.245405809546597,   0.253494180885392,   0.034203426656492},
		{-0.365981296079868,   0.326500233655528,   0.275941303517370,   0.055023222574920},
		{-0.236674369661436,   0.375813967929835,   0.257913833639676,  -0.043914404248011},
		{-0.253172082451640,   0.343142457129662,   0.293232570290045,  -0.084114996018522},
		{-0.114093556606222,   0.370550406036136,   0.335829948560602,   0.020588624220647},
		{-0.036241690936561,   0.303815158034364,   0.422704073661355,   0.021552759594493},
		{-0.045588010303160,   0.233434707610990,   0.493508530759611,  -0.051864695414459},
		{-0.071903052064108,   0.193031863992767,   0.454068001408737,  -0.011114219918777},
		{-0.113223763073563,   0.083458293189944,   0.366535475000725,  -0.067432855238309},
		{-0.049032644406093,   0.103984334468365,   0.433600649865354,  -0.012878928484180},
		{-0.044878070369310,   0.122668648649195,   0.329231268867401,  -0.014240680938112},
		{-0.015091696179388,  -0.006363097124373,   0.236681276886327,  -0.097589222955999},
		{-0.092016032971723,  -0.116567009357012,   0.242494428526526,   0.023194875829466},
		{-0.027157300677849,  -0.117411617777800,   0.179755415411844,   0.126432415646935},
	};
	
	ARWeightedMovingAverageQuaternionFilter *filter = [[ARWeightedMovingAverageQuaternionFilter alloc] initWithWindowSize:10];
	for (int i = 0; i < inputCount; ++i) {
		const ARQuaternion input = inputs[i];
		const double weight = weights[i];
		const ARQuaternion correctOutput = correctOutputs[i];
		
		ARQuaternion output = [filter filterWithInput:input weight:weight];
		
		GHAssertTrue(ARQuaternionEqualsWithAccuracy(correctOutput, output, 1e-6), nil);
	}
	
	[filter release];
}

@end
